{
    "pipes": [],
    "interfaces": [
        {
            "name": "DisplayMessage",
            "id": "interface-DisplayMessage-b4d950b86217e9aecc28c19dc05b26d6d86745d7bbed7e9551446503cb8fb485c824968d0a2f5c19dfdb7e3bb09f2c02d1986c12216461e36c1a445035a8bcc0",
            "file": "src/app/utilities/generic-form-validation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\n\r\nexport class GenericValidator {\r\n    constructor(private validationMessages: ValidationMessages) { }\r\n\r\n    processMessages(container: FormGroup): { [key: string]: string } {\r\n        let messages: {[key: string]: string } = {};\r\n        for (let controlKey in container.controls) {\r\n            if (container.controls.hasOwnProperty(controlKey)) {\r\n                let c = container.controls[controlKey];\r\n\r\n                if (c instanceof FormGroup) {\r\n                    let childMessages = this.processMessages(c);\r\n                    Object.assign(messages, childMessages);\r\n                } else {\r\n                    if (this.validationMessages[controlKey]) {\r\n                        messages[controlKey] = '';\r\n                        if ((c.dirty || c.touched) && c.errors) {\r\n                            Object.keys(c.errors).map(messageKey => {\r\n                                if (this.validationMessages[controlKey][messageKey]) {\r\n                                    messages[controlKey] += this.validationMessages[controlKey][messageKey] + '<br />';\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return messages;\r\n    }\r\n}\r\n\r\nexport interface DisplayMessage {\r\n    [key: string]: string\r\n}\r\nexport interface ValidationMessages {\r\n    [key: string]: { [key: string]: string }\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-b4d950b86217e9aecc28c19dc05b26d6d86745d7bbed7e9551446503cb8fb485c824968d0a2f5c19dfdb7e3bb09f2c02d1986c12216461e36c1a445035a8bcc0",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-127d38d417df65cc546d16dec9cc543ae0f0e846a32c59dd3732fe1c6686f85bc20d7a643621020d18740b399218781559146cd3130a46537a587758e166c756",
            "file": "src/app/account/models/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  id: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ValidationMessages",
            "id": "interface-ValidationMessages-b4d950b86217e9aecc28c19dc05b26d6d86745d7bbed7e9551446503cb8fb485c824968d0a2f5c19dfdb7e3bb09f2c02d1986c12216461e36c1a445035a8bcc0",
            "file": "src/app/utilities/generic-form-validation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\n\r\nexport class GenericValidator {\r\n    constructor(private validationMessages: ValidationMessages) { }\r\n\r\n    processMessages(container: FormGroup): { [key: string]: string } {\r\n        let messages: {[key: string]: string } = {};\r\n        for (let controlKey in container.controls) {\r\n            if (container.controls.hasOwnProperty(controlKey)) {\r\n                let c = container.controls[controlKey];\r\n\r\n                if (c instanceof FormGroup) {\r\n                    let childMessages = this.processMessages(c);\r\n                    Object.assign(messages, childMessages);\r\n                } else {\r\n                    if (this.validationMessages[controlKey]) {\r\n                        messages[controlKey] = '';\r\n                        if ((c.dirty || c.touched) && c.errors) {\r\n                            Object.keys(c.errors).map(messageKey => {\r\n                                if (this.validationMessages[controlKey][messageKey]) {\r\n                                    messages[controlKey] += this.validationMessages[controlKey][messageKey] + '<br />';\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return messages;\r\n    }\r\n}\r\n\r\nexport interface DisplayMessage {\r\n    [key: string]: string\r\n}\r\nexport interface ValidationMessages {\r\n    [key: string]: { [key: string]: string }\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-b4d950b86217e9aecc28c19dc05b26d6d86745d7bbed7e9551446503cb8fb485c824968d0a2f5c19dfdb7e3bb09f2c02d1986c12216461e36c1a445035a8bcc0",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type",
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AccountService",
            "id": "injectable-AccountService-fcf229014ba0ddef9e2c175e5304e728f5b5aa1e6ff72568aae0a70601abd8307c263a4749183265fa5b912b643b28aea3a5d9b48d0b1eb37127d5aaaeb10b58",
            "file": "src/app/account/services/account.service.ts",
            "properties": [
                {
                    "name": "LocalStorage",
                    "defaultValue": "new LocalStorageUtils()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ActivatedRoute, Router } from '@angular/router';\nimport { User } from './../models/user';\nimport { Injectable } from '@angular/core';\nimport { LocalStorageUtils } from 'src/app/utilities/localstorage';\nimport { AngularFireAuth } from '@angular/fire/compat/auth'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n\n  public LocalStorage = new LocalStorageUtils();\n  constructor (private fireAuth: AngularFireAuth, private router: Router) {\n}\n\n  login(user: User) : Promise<unknown>{\n  return this.fireAuth.signInWithEmailAndPassword(user.email, user.password).then((response) => {\n       console.log(response);\n       this.LocalStorage.saveTokenUser(response.user?.uid as string);\n    });\n  }\n\n  logout() {\n    this.fireAuth.signOut().then(() => {\n      this.LocalStorage.clearUserLocalData();\n      this.router.navigate(['/account/login']);\n    });\n  }\n\n  register(user: User) : Promise<void> {\n    return this.fireAuth.createUserWithEmailAndPassword(user.email, user.password).then((response) => {\n      this.LocalStorage.saveTokenUser(response.user?.uid as string);\n    });\n  }\n\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fireAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "fireAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "WeatherService",
            "id": "injectable-WeatherService-51ef090260fae5c35e419c96f9aa4c1d2ca7ed0e2314c9d1ef8316a4aeb68fcf6042f17cbbe0bf7ea5148fdc5adae428825abb8d186bf75baa64193b7ec6a3d6",
            "file": "src/app/Services/weather.service.ts",
            "properties": [
                {
                    "name": "api",
                    "defaultValue": "{\n    key: \"08f6ec1e7b177b5af389baee80528323\",\n    base: \"https://api.openweathermap.org/data/2.5/\",\n    lang: \"pt_br\",\n    units: \"metric\"\n}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "getWeather",
                    "args": [
                        {
                            "name": "lat",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "long",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lat",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "long",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n  api = {\n    key: \"08f6ec1e7b177b5af389baee80528323\",\n    base: \"https://api.openweathermap.org/data/2.5/\",\n    lang: \"pt_br\",\n    units: \"metric\"\n}\n\n  constructor(private http: HttpClient) { }\n\n  getWeather(lat: number, long: number): Observable<any>\n  {\n    return this.http.get(`${this.api.base}weather?lat=${lat}&lon=${long}&lang=${this.api.lang}&units=${this.api.units}&APPID=${this.api.key}`);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AccountGuard",
            "id": "injectable-AccountGuard-4092841daa525cf54877f2c61e7390916d091b3471b3d465d4bf9af160712b4c9d9297063b7db5524eb7b8ccc1dc1c509e5149ea73d41ee3b38dc1a9065c8099",
            "file": "src/app/account/services/account.guard.ts",
            "properties": [
                {
                    "name": "localStorageUtils",
                    "defaultValue": "new LocalStorageUtils()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "canDeactivate",
                    "args": [
                        {
                            "name": "component",
                            "type": "RegisterComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "RegisterComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { LocalStorageUtils } from '../../utilities/localstorage';\nimport { Injectable } from '@angular/core';\nimport { CanActivate, CanDeactivate, Router } from '@angular/router';\nimport { RegisterComponent } from '../register/register.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountGuard implements CanDeactivate<RegisterComponent>, CanActivate{\n\n  constructor(private router: Router) { }\n\n  localStorageUtils = new LocalStorageUtils();\n  canDeactivate(component: RegisterComponent) {\n    if(component.mudancasNaoSalvas) {\n      return window.confirm('Tem certeza que deseja abandonar o preenchimento do formulário?');\n    }\n    return true;\n  }\n\n  canActivate() {\n\n    if(this.localStorageUtils.getTokenUser()){\n        this.router.navigate(['/home']);\n    }\n\n    return true;\n  }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "HomeGuard",
            "id": "injectable-HomeGuard-2931ae8a931150737dd8534df7c5cbc0886f359a49ac2c0d9ec7c7f05bfaf6882a3680b4817f22a5c70de7160e1a838d39687bfc52d128eb0a091bfebc147a4e",
            "file": "src/app/Services/home.guard.ts",
            "properties": [
                {
                    "name": "LocalStorage",
                    "defaultValue": "new LocalStorageUtils()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { LocalStorageUtils } from 'src/app/utilities/localstorage';\nimport { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\n@Injectable({\n  providedIn: 'root'\n})\nexport class HomeGuard implements CanActivate {\n  LocalStorage = new LocalStorageUtils();\n  constructor(private router: Router, private fireAuth: AngularFireAuth) { }\n\n  canActivate() {\n    this.fireAuth.authState.subscribe(response => {\n      if(this.LocalStorage.getTokenUser() == response?.uid)\n      {\n        this.router.navigate(['/account/login'])\n      }\n    });\n   return true;\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fireAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fireAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "AppBasePage",
            "id": "class-AppBasePage-cd95336d887980f9f7a2947ace6b2c96660df479b72db0df0bfcf3875b9867debbb0d8e081515036af25a7265a2d28f90b8135dc32b925e3fbdabe42a239b389",
            "file": "e2e/src/app.base.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element, ExpectedConditions } from 'protractor';\r\n\r\nexport abstract class AppBasePage {\r\n\r\n    constructor() {\r\n        browser.driver.manage().window().maximize();\r\n    }\r\n\r\n    navigateToIndex() {\r\n        return browser.get(browser.baseUrl) as Promise<any>;\r\n    }\r\n\r\n    navigateByUrl(url: string) {\r\n        return browser.get(url) as Promise<any>;\r\n    }\r\n\r\n    navigateByLink(link: string) {\r\n        browser.wait(ExpectedConditions.elementToBeClickable(element(by.linkText(link)))).then(() => {\r\n            return element(by.linkText(link)).click();\r\n        });\r\n    }\r\n\r\n    getActualPage() {\r\n      return browser.getCurrentUrl();\r\n    }\r\n\r\n    getElementXpath(xpath: string) {\r\n        return element(by.xpath(xpath));\r\n    }\r\n\r\n    wait = (milisegundos: number) => {\r\n        browser.sleep(milisegundos);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 3
            },
            "properties": [
                {
                    "name": "wait",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methods": [
                {
                    "name": "getActualPage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getElementXpath",
                    "args": [
                        {
                            "name": "xpath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "xpath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateByLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateByUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateToIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppRegisterPage",
            "id": "class-AppRegisterPage-1528afc8dd202499a13580bd31d9a32da68b696beb4a023e75970817bdf82707469d3130e1b8f53a68702ed12d7a8f87f8dbb0c7b8b6708b755116c77044bed9",
            "file": "e2e/src/register/app.register.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\nimport { AppBasePage } from '../app.base.po';\r\n\r\nexport class AppRegisterPage extends AppBasePage {\r\n\r\n  constructor() { super(); }\r\n\r\n  navigateToRegister() {\r\n    this.navigateByUrl('account/register');\r\n  }\r\n\r\n  navigateToRegisterByLink() {\r\n    this.navigateByLink('Não possui uma conta? Cadastre-se');\r\n  }\r\n\r\n  startNavigation() {\r\n    this.navigateToIndex();\r\n    this.navigateToRegisterByLink();\r\n  }\r\n\r\n  getRegisterTitle(){\r\n   return element(by.id('register-title')).getText();\r\n  }\r\n\r\n  fieldUser = element(by.id('email'));\r\n  fieldPassword = element(by.id('password'));\r\n  fieldConfirmPassword = element(by.id('confirmPassword'));\r\n\r\n  btnRegister = element(by.id('btn-register'));\r\n\r\n  getRegisterResult() {\r\n    return element(by.id('register-fail')).isPresent();\r\n  }\r\n\r\n  getPasswordError() {\r\n    return this.getElementXpath('/html/body/app-root/account-app-root/app-register/div/div[1]/div/div[1]/form/div[3]/span').getText();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 4
            },
            "properties": [
                {
                    "name": "btnRegister",
                    "defaultValue": "element(by.id('btn-register'))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "fieldConfirmPassword",
                    "defaultValue": "element(by.id('confirmPassword'))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "fieldPassword",
                    "defaultValue": "element(by.id('password'))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "fieldUser",
                    "defaultValue": "element(by.id('email'))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "wait",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "AppBasePage"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getPasswordError",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRegisterResult",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRegisterTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToRegister",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToRegisterByLink",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startNavigation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getActualPage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AppBasePage"
                    }
                },
                {
                    "name": "getElementXpath",
                    "args": [
                        {
                            "name": "xpath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "xpath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AppBasePage"
                    }
                },
                {
                    "name": "navigateByLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AppBasePage"
                    }
                },
                {
                    "name": "navigateByUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AppBasePage"
                    }
                },
                {
                    "name": "navigateToIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AppBasePage"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AppBasePage",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FormBaseComponent",
            "id": "class-FormBaseComponent-e7334e5126f67ed4455cfa80419518904de77bfeec9f1345246571571381e4c59b27ba146597f784826104c035c85d871b30f790c0fb2f5863cc6b234491ff7c",
            "file": "src/app/base-components/form-base.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ElementRef } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\nimport { Observable, fromEvent, merge } from 'rxjs';\r\n\r\nimport { GenericValidator, DisplayMessage, ValidationMessages } from '../utilities/generic-form-validation';\r\n\r\nexport abstract class FormBaseComponent {\r\n\r\n    displayMessage: DisplayMessage = {};\r\n    genericValidator!: GenericValidator;\r\n    validationMessages!: ValidationMessages;\r\n\r\n    mudancasNaoSalvas!: boolean;\r\n\r\n    public configureMessagesBaseValidation(validationMessages: ValidationMessages) {\r\n        this.genericValidator = new GenericValidator(validationMessages);\r\n    }\r\n\r\n    public configureFormBaseValidation(\r\n        formInputElements: ElementRef[],\r\n        formGroup: FormGroup) {\r\n\r\n        let controlBlurs: Observable<any>[] = formInputElements\r\n            .map((formControl: ElementRef) => fromEvent(formControl.nativeElement, 'blur'));\r\n\r\n        merge(...controlBlurs).subscribe(() => {\r\n            this.validateForm(formGroup)\r\n        });\r\n    }\r\n\r\n    public validateForm(formGroup: FormGroup) {\r\n        this.displayMessage = this.genericValidator.processMessages(formGroup);\r\n        this.mudancasNaoSalvas = true;\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "displayMessage",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DisplayMessage",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "genericValidator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GenericValidator",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "mudancasNaoSalvas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "validationMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidationMessages",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "configureFormBaseValidation",
                    "args": [
                        {
                            "name": "formInputElements",
                            "type": "ElementRef[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "formInputElements",
                            "type": "ElementRef[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "configureMessagesBaseValidation",
                    "args": [
                        {
                            "name": "validationMessages",
                            "type": "ValidationMessages",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "validationMessages",
                            "type": "ValidationMessages",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateForm",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GenericValidator",
            "id": "class-GenericValidator-b4d950b86217e9aecc28c19dc05b26d6d86745d7bbed7e9551446503cb8fb485c824968d0a2f5c19dfdb7e3bb09f2c02d1986c12216461e36c1a445035a8bcc0",
            "file": "src/app/utilities/generic-form-validation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\n\r\nexport class GenericValidator {\r\n    constructor(private validationMessages: ValidationMessages) { }\r\n\r\n    processMessages(container: FormGroup): { [key: string]: string } {\r\n        let messages: {[key: string]: string } = {};\r\n        for (let controlKey in container.controls) {\r\n            if (container.controls.hasOwnProperty(controlKey)) {\r\n                let c = container.controls[controlKey];\r\n\r\n                if (c instanceof FormGroup) {\r\n                    let childMessages = this.processMessages(c);\r\n                    Object.assign(messages, childMessages);\r\n                } else {\r\n                    if (this.validationMessages[controlKey]) {\r\n                        messages[controlKey] = '';\r\n                        if ((c.dirty || c.touched) && c.errors) {\r\n                            Object.keys(c.errors).map(messageKey => {\r\n                                if (this.validationMessages[controlKey][messageKey]) {\r\n                                    messages[controlKey] += this.validationMessages[controlKey][messageKey] + '<br />';\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return messages;\r\n    }\r\n}\r\n\r\nexport interface DisplayMessage {\r\n    [key: string]: string\r\n}\r\nexport interface ValidationMessages {\r\n    [key: string]: { [key: string]: string }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "validationMessages",
                        "type": "ValidationMessages",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "validationMessages",
                        "type": "ValidationMessages",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "processMessages",
                    "args": [
                        {
                            "name": "container",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "container",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LocalStorageUtils",
            "id": "class-LocalStorageUtils-eaad67e87dc022d2587be06087a8108acc9a4f5f56f2e9addb19034b3559fbeab674ea68b3dc805956e0c05a1e5215026748fec603a26724a24819f3c4366793",
            "file": "src/app/utilities/localstorage.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class LocalStorageUtils {\r\n\r\n  public clearUserLocalData() {\r\n      localStorage.removeItem('compassProject.token');\r\n  }\r\n\r\n  public getTokenUser(): string {\r\n      return localStorage.getItem('compassProject.token') as string;\r\n  }\r\n\r\n  public saveTokenUser(token: string) {\r\n      localStorage.setItem('compassProject.token', token);\r\n  }\r\n\r\n\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "clearUserLocalData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getTokenUser",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "saveTokenUser",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AccountAppComponent",
            "id": "component-AccountAppComponent-834076247e8d0ef352999faa6fd4a1ea0f622212dea3b651d3abf48fd44e0115ed39763fd3db02c8b6fe62227b28c7a333bffa4f1b35502f93997e2bba4fd080",
            "file": "src/app/account/account.app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "account-app-root",
            "styleUrls": [],
            "styles": [],
            "template": "<router-outlet></router-outlet>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'account-app-root',\n  template: '<router-outlet></router-outlet>'\n})\nexport class AccountAppComponent { }\n\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-376f86a09c61005675989c7c426483d6023af189276f791c47e3b3a83a0a22c0c68ed3504a34fd6463a7c770cdfe4941dfbd5ec435ef9419bb9f44ae19d1033d",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'CompassProject'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'CompassProject';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-93339a9aebfeb4ecf894cc1f6072343a0bb334fad8ba2af3072b873ab9f58ed811cd3405d2e0b1f303848693dee50ec75f3bb803804ce58f1a6b61fee0a5c991",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actualDateTime",
                    "defaultValue": "Date.now()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "localStorage",
                    "defaultValue": "new LocalStorageUtils",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LocalStorageUtils",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "returnUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "timer",
                    "defaultValue": "600",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "urlIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "weather",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refreshTime",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Router } from '@angular/router';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { AccountService } from './../account/services/account.service';\nimport { LocalStorageUtils } from 'src/app/utilities/localstorage';\nimport { WeatherService } from './../Services/weather.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  actualDateTime: number = Date.now();\n  weather: any;\n  timer: number = 600;\n  urlIcon!: string;\n  localStorage: LocalStorageUtils = new LocalStorageUtils;\n  returnUrl!: string;\n  constructor(private weatherService: WeatherService, private accountService: AccountService, private fireAuth: AngularFireAuth, router: Router) {\n    setInterval(() => {\n\n     this.refreshTime();\n     if(this.timer != 0)\n      this.timer--;\n     else\n      accountService.logout();\n    }, 1000)\n  }\n\n  ngOnInit(): void {\n    this.weatherService.getWeather( -23.5489, -46.6388).\n    subscribe((weather) => {\n     this.weather = weather;\n     this.urlIcon = \"../../assets/\" + weather.weather[0].icon + \".png\";\n    });\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n      (position) => {\n       this.weatherService.getWeather(position.coords.latitude, position.coords.longitude).\n       subscribe((weather) => {\n        this.weather = weather;\n        this.urlIcon = \"../../assets/\" + weather.weather[0].icon + \".png\";\n       });\n      }\n      );\n    }\n    else {\n      alert('navegador não suporta geolozalicação');\n    }\n\n  }\n\n  logout() {\n    this.accountService.logout();\n  }\n\n  refreshTime (){\n      this.actualDateTime = Date.now();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../generalStyles/mixins-and-variables.scss';\r\n\r\n.teste {\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n}\r\nheader {\r\n  @include responsive(mobileS) {\r\n    flex-direction: column;\r\n    gap: 20px;\r\n    align-items: center;\r\n  }\r\n\r\n  @include responsive(mobileL) {\r\n    flex-direction: column;\r\n    gap: 20px;\r\n    align-items: center;\r\n  }\r\n\r\n  @include responsive(tablet) {\r\n    align-items: center;\r\n    margin-bottom: 60px;\r\n  }\r\n  flex-direction: row;\r\n  margin-left: 40px;\r\n  margin-right: 40px;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  margin-top: 25px;\r\n}\r\n\r\n.img-weather {\r\n  width: 34px;\r\n  height: 34px;\r\n\r\n}\r\n\r\n.temp-text {\r\n  font-weight: 700;\r\n  font-size: 48px;\r\n  line-height: 61px;\r\n\r\n  @include responsive(mobileS) {\r\n    font-size: 30px;\r\n  }\r\n}\r\n.datetime {\r\n  text-align: center;\r\n}\r\n\r\n.hour {\r\n  @include responsive(mobileS) {\r\n    display: none;\r\n  }\r\n\r\n  @include responsive(mobileL) {\r\n    display: none;\r\n  }\r\n\r\n  @include responsive(tablet) {\r\n    display: none;\r\n  }\r\n\r\n  @include responsive(laptop) {\r\n    font-size: 100px;\r\n  }\r\n  font-size: 144px;\r\n  font-weight: 700;\r\n  line-height: 1;\r\n  color: #222;\r\n}\r\n\r\n.date {\r\n  font-size: 14px;\r\n}\r\n\r\nmain {\r\n  justify-content: space-between;\r\n  @include responsive(mobileL) {\r\n    justify-content: center;\r\n  }\r\n\r\n  @include responsive(mobileS) {\r\n    justify-content: center;\r\n    padding-bottom: 15px;\r\n    padding-top: 15px;\r\n  }\r\n  .logo {\r\n    @include responsive(tablet) {\r\n      max-width: 330px;\r\n    }\r\n    @include responsive(mobileL) {\r\n      display: none;\r\n    }\r\n    @include responsive(mobileS) {\r\n      display: none;\r\n    }\r\n\r\n    @include responsive(laptop) {\r\n      max-width: 400px;\r\n    }\r\n  }\r\n  & > div {\r\n    @include responsive(mobileS) {\r\n      margin-top: 0;\r\n      padding-bottom: 5px;\r\n      margin-right: 0px;\r\n    }\r\n\r\n    @include responsive(mobileL) {\r\n      margin-top: 0;\r\n      padding-right: 10px;\r\n      padding-bottom: 5px;\r\n      margin-right: 0px;\r\n    }\r\n\r\n    @include responsive(tablet)\r\n    {\r\n      margin-bottom: 10px;\r\n      margin-top: 80px ;\r\n      margin-right: 30px;\r\n    }\r\n\r\n    @include responsive(laptop)\r\n    {\r\n      margin-top: 100px ;\r\n      margin-right: 50px;\r\n    }\r\n\r\n    margin-right: 180px;\r\n    margin-top: 100px;\r\n  }\r\n  h1, h2 {\r\n    color: $primary-color;\r\n    font-size: 64px;\r\n    line-height: 81px;\r\n    text-align: right;\r\n    margin-bottom: 10px;\r\n\r\n    @include responsive(mobileL) {\r\n      font-size: 26px !important;\r\n      line-height: 1 !important;\r\n      margin-bottom: 5px !important;\r\n      margin-top: 10px;\r\n    }\r\n    @include responsive(mobileS) {\r\n      font-size: 18px !important;\r\n      line-height: 0.5 !important;\r\n      margin-bottom: 5px !important;\r\n      margin-top: 10px;\r\n    }\r\n\r\n  }\r\n\r\n  h1 {\r\n    @include responsive(tablet) {\r\n        font-size: 24px;\r\n        margin-bottom: 0px;\r\n        line-height: 10px;\r\n    }\r\n\r\n    @include responsive(laptop) {\r\n      font-size: 38px;\r\n      margin-bottom: 0px;\r\n      line-height: 40px;\r\n    }\r\n  }\r\n  h2 {\r\n    font-size: 36px;\r\n    margin-bottom: 3px;\r\n    line-height: 46px;\r\n\r\n    @include responsive(tablet) {\r\n        font-size: 20px;\r\n        line-height: 10px;\r\n        text-align: right;\r\n        margin-bottom: 0px;\r\n    }\r\n\r\n    @include responsive(laptop) {\r\n      font-size: 28px;\r\n      margin-bottom: 0px;\r\n      line-height: 30px;\r\n    }\r\n  }\r\n\r\n  p {\r\n    font-weight: 400;\r\n    text-align: right;\r\n    font-size: 24px;\r\n    line-height: 30px;\r\n\r\n    @include responsive(mobileS) {\r\n      font-size: 12px;\r\n      line-height: 20px;\r\n    }\r\n    @include responsive(mobileL) {\r\n      line-height: 3px;\r\n      font-size: 16px;\r\n      margin-top: 10px;\r\n      padding-bottom: 5px;\r\n    }\r\n\r\n    @include responsive(tablet) {\r\n      font-size: 16px;\r\n      margin-bottom: 10px;\r\n  }\r\n\r\n    @include responsive(laptop) {\r\n      font-size: 20px;\r\n      margin-bottom: 10px;\r\n    }\r\n\r\n  }\r\n}\r\n\r\nfooter {\r\n  flex-direction: row;\r\n  background: linear-gradient(90.16deg, #33383D 0%, #1C1D20 100%);\r\n  width: 100%;\r\n  min-height: 100px;\r\n  align-items: center;\r\n  color: #fff;\r\n\r\n\r\n  @include responsive(mobileS) {\r\n    flex-direction: column;\r\n    gap: 10px;\r\n    height: auto;\r\n    justify-content: center;\r\n  }\r\n\r\n  @include responsive(mobileL) {\r\n    margin-top: 5px;\r\n    flex-direction: column;\r\n    gap: 10px;\r\n    height: auto;\r\n  }\r\n\r\n\r\n & > p {\r\n  max-width: 540px;\r\n  margin-left: 350px;\r\n  font-weight: 400;\r\n  font-size: 12px;\r\n  line-height: 15px;\r\n  text-align: right;\r\n  padding-right: 35px;\r\n  position: relative;\r\n\r\n  @include responsive(mobileL) {\r\n    max-width: 390px;\r\n    text-align: center;\r\n    padding-right: 0;\r\n    margin-left: 0;\r\n    padding-top: 20px;\r\n  }\r\n  @include responsive(mobileS) {\r\n    font-size: 10px;\r\n    padding-right: 0;\r\n    max-width: 280px;\r\n    margin-left: 0;\r\n    text-align: center;\r\n    padding-top: 20px;\r\n   }\r\n\r\n   @include responsive(tablet) {\r\n    margin-left: 50px ;\r\n    max-width: 210px;\r\n    text-align: right !important;\r\n    font-size: 10px !important;\r\n    padding-top: 0 !important;\r\n   }\r\n\r\n   @include responsive(laptop) {\r\n    max-width: 300px;\r\n    margin-left: 100px;\r\n   }\r\n\r\n\r\n  &::after {\r\n    content: '';\r\n    display: block;\r\n    background-color: #fff;\r\n    position: absolute;\r\n    width: 1px;\r\n    height: 60px;\r\n    right: 10px;\r\n    top: -15px;\r\n\r\n    @include responsive(mobileL) {\r\n      height: 1px;\r\n      width: 60px;\r\n      right: 42%;\r\n      top: 110%;\r\n    }\r\n    @include responsive(mobileS) {\r\n     height: 1px;\r\n     width: 60px;\r\n     right: 39%;\r\n     top: 110%;\r\n    }\r\n    @include responsive(tablet) {\r\n      top: 0px;\r\n    }\r\n\r\n    @include responsive(laptop) {\r\n      top: 0px;\r\n     }\r\n  }\r\n\r\n }\r\n\r\n .timer {\r\n  margin-left: 125px;\r\n  @include responsive(mobileS) {\r\n    margin-left: 0px;\r\n    align-items: center;\r\n    gap: 10px;\r\n  }\r\n\r\n  @include responsive(mobileL) {\r\n    margin-top: 10px;\r\n    margin-left: 0px ;\r\n    gap: 10px;\r\n  }\r\n\r\n  @include responsive(tablet) {\r\n    margin-left: 0px;\r\n  }\r\n\r\n  @include responsive(laptop) {\r\n    margin-left: 0px;\r\n   }\r\n\r\n  font-weight: 400;\r\n  font-size: 14px;\r\n  line-height: 18px;\r\n  align-items: center;\r\n  gap: 35px;\r\n }\r\n .timer-info {\r\n  max-width: 100px;\r\n  text-align: right;\r\n  font-weight: 400;\r\n  font-size: 14px;\r\n  line-height: 18px;\r\n  @include responsive(mobileS) {\r\n    margin-top: 10px;\r\n    text-align: center;\r\n  }\r\n\r\n  @include responsive(mobileL) {\r\n    margin-top: 10px;\r\n    text-align: center;\r\n  }\r\n\r\n }\r\n .timer-value {\r\n  text-align: center;\r\n  strong {\r\n    display: block;\r\n    font-weight: 700;\r\n    font-size: 48px;\r\n    line-height: 1;\r\n    @include responsive(mobileS) {\r\n      padding-top: 8px;\r\n      font-size: 20px;\r\n    }\r\n    @include responsive(tablet) {\r\n      font-size: 36px;\r\n    }\r\n    @include responsive(mobileL) {\r\n      padding-top: 13px;\r\n      font-size: 20px;\r\n    }\r\n  }\r\n\r\n }\r\n\r\n .next-button {\r\n  @include responsive(mobileS) {\r\n    position: relative;\r\n    background: none;\r\n    color: white;\r\n    padding-left: 20%;\r\n    font-weight: 600;\r\n    width: 70%;\r\n    height: 70px;\r\n  }\r\n\r\n  @include responsive(mobileL) {\r\n    position: relative;\r\n    width: 100%;\r\n    right: 0;\r\n    height: 70px;\r\n  }\r\n\r\n  width: 130px;\r\n  background-color: #fff;\r\n  color: $primary-color;\r\n  font-weight: 400;\r\n  font-size: 12px;\r\n  line-height: 15px;\r\n  text-align: center;\r\n  height: 100px;\r\n  border: none;\r\n  position: absolute;\r\n  right: 130px;\r\n}\r\n\r\n.logout-button {\r\n  @include responsive(mobileS) {\r\n    position: absolute;\r\n    bottom: 0;\r\n    right: 0;\r\n    width: 50%;\r\n    height: 70px;\r\n  }\r\n\r\n  @include responsive(mobileL) {\r\n    position: relative;\r\n    width: 100%;\r\n    right: 0;\r\n    height: 70px;\r\n  }\r\n  position: absolute;\r\n  right: 0;\r\n  background: none;\r\n  border: none;\r\n  font-weight: 700;\r\n  font-size: 12px;\r\n  line-height: 15px;\r\n  text-align: center;\r\n  height: 100px;\r\n  width: 130px;\r\n}\r\n\r\n}\r\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "weatherService",
                        "type": "WeatherService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fireAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "weatherService",
                        "type": "WeatherService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fireAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"teste\">\n<header class=\"flex\">\n  <img src=\"../../assets/Logo-Compasso-Preto.svg\" alt=\"\">\n  <div class=\"datetime\">\n    <div class=\"hour\">{{ actualDateTime | date:'shortTime':'':'pt' }}</div>\n    <div class=\"date\">{{ actualDateTime | date:'fullDate':'':'pt' }}</div>\n  </div>\n\n  <div>\n    <p>{{ weather.name }} - {{ weather.sys.country}}</p>\n    <div class=\"flex\" style=\"gap: 12px;align-items: center;\">\n      <img class=\"img-weather\" src=\"{{ urlIcon }}\" alt=\"\">\n      <p class=\"temp-text\">{{ weather.main.temp | number: '1.0-0'}}°</p>\n    </div>\n\n  </div>\n</header>\n\n\n<main class=\"flex \">\n  <img class=\"logo\" src=\"../../assets/bola-LogoCompasso.svg\" alt=\"\">\n  <div>\n    <h2>Our Mission is</h2>\n    <p>Nossa missão é</p>\n\n    <h1>To transform the world</h1>\n    <p>transformar o mundo</p>\n\n    <h1>building digital experiences</h1>\n    <p>construindo experiências digitais</p>\n\n    <h1>that enable our client's growth</h1>\n    <p>que permitam o crescimento dos nossos clientes</p>\n  </div>\n</main>\n\n<footer class=\"flex\">\n<p id=\"explanation-login\">Essa janela do navegador é usada para manter sua sessão de autenticação ativa. Deixe-a aberta em segundo plano e abra uma nova janela pra continuar a navegar.</p>\n<div class=\"flex timer\">\n\n  <p class=\"timer-info\">Application refresh in </p>\n  <p class=\"timer-value\"><strong>{{ timer }}</strong>seconds</p>\n</div>\n\n\n<button class=\"next-button\"> Continuar<br>Navegando</button>\n<button class=\"logout-button\" (click)=\"logout()\">Logout</button>\n\n</footer>\n\n\n</section>\n\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-46faa3b3cafa24f23b52027bfea4c1d2ddc3f53979406d517042ab2a6fdc4c52a44af3b3598cea52b0433da7383942d63b4ebaaae575ddc18c7f08e8a8620283",
            "file": "src/app/account/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authFail",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "emailValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "formInputElements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "FormControlName, {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "LocalStorage",
                    "defaultValue": "new LocalStorageUtils",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LocalStorageUtils",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "passwordValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "returnUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "displayMessage",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DisplayMessage",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "FormBaseComponent"
                    }
                },
                {
                    "name": "genericValidator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GenericValidator",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "FormBaseComponent"
                    }
                },
                {
                    "name": "mudancasNaoSalvas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "FormBaseComponent"
                    }
                },
                {
                    "name": "validationMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidationMessages",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "FormBaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "loadFail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadSucces",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "configureFormBaseValidation",
                    "args": [
                        {
                            "name": "formInputElements",
                            "type": "ElementRef[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "formInputElements",
                            "type": "ElementRef[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormBaseComponent"
                    }
                },
                {
                    "name": "configureMessagesBaseValidation",
                    "args": [
                        {
                            "name": "validationMessages",
                            "type": "ValidationMessages",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "validationMessages",
                            "type": "ValidationMessages",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormBaseComponent"
                    }
                },
                {
                    "name": "validateForm",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormBaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgxSpinnerService } from 'ngx-spinner';\nimport { LocalStorageUtils } from 'src/app/utilities/localstorage';\nimport { AccountService } from './../services/account.service';\nimport { AfterViewInit, Component, ElementRef, OnInit, ViewChildren } from '@angular/core';\nimport { FormBuilder, FormControlName, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBaseComponent } from 'src/app/base-components/form-base.component';\nimport { User } from '../models/user';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent extends FormBaseComponent implements OnInit, AfterViewInit {\n\n\n  @ViewChildren(FormControlName, { read: ElementRef })\n  formInputElements!: ElementRef[];\n\n  errors: any[] = [];\n  loginForm!: FormGroup;\n  user!: User;\n  authFail: boolean = false;\n  emailValue: string = '';\n  passwordValue: string = '';\n  returnUrl: string;\n  LocalStorage: LocalStorageUtils = new LocalStorageUtils;\n\n  constructor(private fb: FormBuilder,\n    private router: Router,\n    private route: ActivatedRoute,\n    private accountService: AccountService,\n    private spinner: NgxSpinnerService) {\n    super();\n\n    this.validationMessages = {\n      email: {\n        required: 'Informe o e-mail',\n        email: 'Email inválido',\n      },\n      password: {\n        required: 'Informe a senha'\n      }\n    };\n\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'];\n\n    super.configureMessagesBaseValidation(this.validationMessages);\n  }\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]]\n    });\n  }\n\n  ngAfterViewInit(): void {\n    super.configureFormBaseValidation(this.formInputElements, this.loginForm);\n  }\n\n  login() {\n    this.spinner.show();\n    if (this.loginForm?.dirty && this.loginForm?.valid) {\n\n      this.user = Object.assign({}, this.user, this.loginForm.value);\n      this.accountService.login(this.user).then(\n        () => this.loadSucces()\n      ).catch(() => this.loadFail()) ;\n      }\n\n  }\n\n  loadSucces() {\n    this.spinner.hide();\n    this.mudancasNaoSalvas = false;\n    this.loginForm?.reset();\n    this.router.navigate(['/home']);\n    }\n\n\n  loadFail(){\n    this.spinner.hide();\n    this.authFail = true;\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../generalStyles/mixins-and-variables.scss';\r\n\r\n.backgrounds {\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  & > div {\r\n    height: 100%;\r\n  }\r\n\r\n\r\n}\r\n\r\n.background-login {\r\n  background: linear-gradient(180deg, #33383D 0%, #1C1D20 100%);\r\n  color: white;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 50%;\r\n  @include responsive(mobileL) {\r\n    width: 100% !important;\r\n  }\r\n  @include responsive(mobileS) {\r\n    width: 100% !important;\r\n  }\r\n\r\n\r\n  .logo-login {\r\n    @include responsive (monitor) {\r\n      display: none;\r\n    }\r\n    @include responsive (tablet) {\r\n      display: none;\r\n    }\r\n\r\n    @include responsive (laptop) {\r\n      display: none;\r\n    }\r\n\r\n    @include responsive(mobileS)\r\n    {\r\n      max-width: 270px !important;\r\n      margin-bottom: 20px;\r\n    }\r\n\r\n    @include responsive(mobileL)\r\n    {\r\n      width: 330px;\r\n      margin-bottom: 30px;\r\n    }\r\n  }\r\n  .explanation {\r\n      strong {\r\n        font-size: 60px;\r\n        font-weight: 400;\r\n      }\r\n      max-width: 300px;\r\n      @include responsive(mobileS) {\r\n        max-width: 270px;\r\n      }\r\n      font-size: 16px;\r\n    }\r\n\r\n\r\n    margin-bottom: 100px;\r\n\r\n.form {\r\n  h1 {\r\n    font-size: 30px;\r\n    font-weight: 400;\r\n    margin-top: 100px;\r\n    margin-bottom: 35px;\r\n    @include responsive(mobileS) {\r\n      margin-top: 50px !important;\r\n    }\r\n\r\n    @include responsive(mobileL)\r\n    {\r\n      margin-top: 70px !important;\r\n    }\r\n  }\r\n\r\n.form-group + .form-group {\r\n  margin-top: 35px;\r\n}\r\n\r\n input {\r\n  color: white;\r\n  background: none;\r\n  outline: none;\r\n  box-sizing: border-box;\r\n  width: 379px;\r\n  @include responsive(tablet) {\r\n    width: 320px;\r\n  }\r\n\r\n  @include responsive(mobileL) {\r\n    width: 320px;\r\n  }\r\n\r\n  @include responsive(mobileS) {\r\n    width: 270px;\r\n  }\r\n  height: 60px;\r\n  border: 1px solid;\r\n  border-radius: 50px;\r\n  padding: 20px;\r\n  margin-right: 20px;\r\n  @include responsive(mobileS) {\r\n    margin-right: 0px;\r\n  }\r\n  &::placeholder {\r\n    color: white;\r\n    font-family: Mark-Pro;\r\n  }\r\n\r\n }\r\n .out-input {\r\n  transition: 0.5s;\r\n  position: absolute;\r\n  right: -20px;\r\n\r\n  @include responsive(mobileS) {\r\n   right: 30px;\r\n  }\r\n\r\n}\r\n .in-input {\r\n  transform: translateX(-40px);\r\n  @include responsive(mobileS) {\r\n    transform: translateX(0);\r\n    right: 30px;\r\n   }\r\n  position: absolute;\r\n  transition: 0.5s;\r\n  right: 0px;\r\n}\r\n\r\n  .text-danger {\r\n    font-weight: 700;\r\n    font-size: 16px;\r\n    line-height: 20px;\r\n    text-align: center;\r\n    color: #E9B425;\r\n\r\n    p {\r\n      margin-top: 10px;\r\n    }\r\n\r\n  }\r\n\r\n  margin-bottom: 28px;\r\n}\r\n\r\nbutton {\r\nbox-sizing: border-box;\r\ncolor: white;\r\nfont-weight: 700;\r\nfont-size: 18px;\r\nwidth: 379px;\r\nmargin-bottom: 15px;\r\n@include responsive(tablet)\r\n{\r\n  width: 320px;\r\n}\r\n\r\n@include responsive(mobileL) {\r\n  width: 320px;\r\n}\r\n\r\n@include responsive(mobileS) {\r\n  width: 270px;\r\n}\r\nheight: 67px;\r\nbackground: linear-gradient(90deg, #FF2D04 0%, #C13216 100%);\r\nbox-shadow: 5px 5px 15px rgba(0, 0, 0, 0.5);\r\nborder-radius: 50px;\r\nborder: none;\r\nmargin-top: 50px;\r\n\r\ncursor: pointer;\r\n\r\n&:disabled {\r\n  cursor: default;\r\n}\r\n\r\n}\r\n\r\n.auth-fail-button {\r\n  margin-top: 47px !important;\r\n}\r\n\r\n}\r\n\r\n.background-notebook {\r\n  background: url('../../../assets/notebook-background.jpg') no-repeat center;\r\n  display: none;\r\n  @include responsive(tablet) {\r\n    display: block;\r\n    width: 50%;\r\n  }\r\n  @include responsive(laptop) {\r\n    display: block;\r\n    width: 50%;\r\n  }\r\n  @include responsive(monitor) {\r\n    display: block;\r\n    width: 50%;\r\n  }\r\n}\r\n\r\n\r\n.logo {\r\n  margin: auto;\r\n  margin-top: 35px;\r\n}\r\n\r\n.input-auth-fail, .is-invalid {\r\n  border-color:#E9B425 !important;\r\n}\r\n\r\na {\r\n  color: #E9B425;\r\n  transition: .3s;\r\n  strong {\r\n    text-decoration: underline;\r\n  }\r\n  &:hover {\r\n    color: black;\r\n    transition: .3s;\r\n  }\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "FormBaseComponent",
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"flex backgrounds\">\n\n  <div class=\"background-login flex\">\n\n    <div>\n      <img class=\"logo-login\" src=\"../../../assets/Logo-Compasso-Branco.svg\" alt=\"\">\n      <p class=\"explanation\"><strong>Olá,</strong><br> Para continuar navegando de forma segura, efetue o login na rede.</p>\n\n\n    <div class=\"form\" >\n      <h1>Login</h1>\n\n        <form novalidate (ngSubmit)=\"login()\" [formGroup]=\"loginForm\" style=\"margin-bottom: 10px;\">\n          <div class=\"form-group\">\n            <div class=\"flex input-icon\" style=\"align-items: center; position: relative;\">\n            <input (input)=\"authFail = false\" [class.input-auth-fail]=\"authFail\" [(ngModel)]=\"emailValue\" matInput placeholder=\"Usuário\" class=\"form-control\" id=\"email\" type=\"text\" formControlName=\"email\" [ngClass]=\"{'is-invalid': displayMessage.email }\">\n            <img src=\"../../../assets/user-icon.svg\"  [class.out-input]=\"emailValue == ''\" [class.in-input] =\"emailValue != '' && emailValue != ' '\"  alt=\"\">\n          </div>\n            <span class=\"text-danger\" *ngIf=\"displayMessage.email\">\n            <p [innerHTML]=\"displayMessage.email\"></p>\n          </span>\n          </div>\n\n          <div class=\"form-group\">\n            <div class=\"flex input-icon\" style=\"align-items: center;  position: relative;\">\n            <input (input)=\"authFail = false\" [class.input-auth-fail]=\"authFail\" [(ngModel)]=\"passwordValue\" placeholder=\"Senha\" class=\"form-control\" id=\"password\" type=\"password\" formControlName=\"password\" [ngClass]=\"{'is-invalid': displayMessage.password }\">\n            <img src=\"../../../assets/password-icon.svg\" alt=\"\"  [class.out-input]=\"passwordValue == ''\" [class.in-input] =\"passwordValue != '' && passwordValue != ' '\">\n          </div>\n            <span class=\"text-danger\" *ngIf=\"displayMessage.password\">\n            <p [innerHTML]=\"displayMessage.password\"></p>\n            </span>\n          </div>\n\n        </form>\n        <p *ngIf=\"authFail == true\" class=\"text-danger\" style=\"margin-top: 28px;\">Ops, usuário ou senha inválidos! <br>Tente novamente</p>\n    </div>\n    <div class=\"form-group\">\n      <button class=\"Mark\" id=\"Login\" [disabled]=\"!loginForm.valid\" type=\"submit\" (click)=\"login()\" [ngClass]=\"{'auth-fail-button': authFail == true}\"> Continuar</button>\n    </div>\n    <a [routerLink]=\"['/account/register']\">Não possui uma conta? <strong>Cadastre-se</strong></a>\n  </div>\n  </div>\n\n  <div class=\"background-notebook\">\n    <img class=\"logo\" src=\"../../../assets/Logo-Compasso-Branco.svg\" alt=\"\">\n  </div>\n\n</div>\n\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-a16fc7937e95f4c9b34ef761bab5c5ce3e38df3d80374ddd9bd307e2cc8f5c60127cb31bd601de51ebc2e2ef5a0eafd7d5a14dec43b98f79ec9db081000574fb",
            "file": "src/app/account/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "confirmPasswordValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "emailValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "formInputElements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "FormControlName, {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "LocalStorage",
                    "defaultValue": "new LocalStorageUtils",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LocalStorageUtils",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "passwordValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "registerFail",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "displayMessage",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DisplayMessage",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "FormBaseComponent"
                    }
                },
                {
                    "name": "genericValidator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GenericValidator",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "FormBaseComponent"
                    }
                },
                {
                    "name": "mudancasNaoSalvas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "FormBaseComponent"
                    }
                },
                {
                    "name": "validationMessages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidationMessages",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "FormBaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "hasCapitalLetter",
                    "args": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasNumber",
                    "args": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasSpecialCharacter",
                    "args": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadFail",
                    "args": [
                        {
                            "name": "error",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadSucces",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validationPassword",
                    "args": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "configureFormBaseValidation",
                    "args": [
                        {
                            "name": "formInputElements",
                            "type": "ElementRef[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "formInputElements",
                            "type": "ElementRef[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormBaseComponent"
                    }
                },
                {
                    "name": "configureMessagesBaseValidation",
                    "args": [
                        {
                            "name": "validationMessages",
                            "type": "ValidationMessages",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "validationMessages",
                            "type": "ValidationMessages",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormBaseComponent"
                    }
                },
                {
                    "name": "validateForm",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormBaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { LocalStorageUtils } from 'src/app/utilities/localstorage';\nimport { AccountService } from './../services/account.service';\nimport { AfterViewInit, Component, ElementRef, OnInit, ViewChildren } from '@angular/core';\nimport { FormBuilder, FormControl, FormControlName, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { FormBaseComponent } from 'src/app/base-components/form-base.component';\nimport { User } from '../models/user';\nimport { CustomValidators } from '@narik/custom-validators';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent extends FormBaseComponent implements OnInit, AfterViewInit {\n\n\n  @ViewChildren(FormControlName, { read: ElementRef })\n  formInputElements!: ElementRef[];\n\n  errors: any[] = [];\n  registerForm!: FormGroup;\n  user!: User;\n  registerFail: boolean = false;\n  emailValue: string = '';\n  passwordValue: string = '';\n  confirmPasswordValue: string = '';\n  LocalStorage: LocalStorageUtils = new LocalStorageUtils;\n\n\n  constructor(private fb: FormBuilder,\n    private router: Router,\n    private route: ActivatedRoute,\n    private accountService: AccountService,\n    private toastr: ToastrService,\n    private spinner: NgxSpinnerService) {\n    super();\n\n    this.validationMessages = {\n      email: {\n        required: 'Informe o e-mail',\n        email: 'Email inválido',\n      },\n      password: {\n        required: 'Informe a senha',\n        minLength: 'A senha deve possuir pelo menos 6 caracteres',\n      },\n      confirmPassword: {\n        required: 'Informe a senha novamente',\n        minLength: 'A senha deve possuir pelo menos 6 caracteres',\n        equalTo: 'As senhas não conferem'\n      }\n    };\n    super.configureMessagesBaseValidation(this.validationMessages);\n  }\n\n  ngOnInit(): void {\n\n    let password = new FormControl('', [Validators.required, Validators.minLength(6), Validators.pattern(/[A-Z]/), Validators.pattern(/[0-9]/),  Validators.pattern(/\\W|_/)]);\n    let confirmPassword = new FormControl('', [Validators.required, Validators.minLength(6), CustomValidators.equalTo(password)]);\n\n    this.registerForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: password,\n      confirmPassword: confirmPassword\n    });\n  }\n\n  ngAfterViewInit(): void {\n    super.configureFormBaseValidation(this.formInputElements, this.registerForm);\n  }\n\n  register() {\n    if (this.registerForm?.dirty && this.registerForm?.valid) {\n      this.spinner.show();\n      this.user = Object.assign({}, this.user, this.registerForm.value);\n      this.accountService.register(this.user).then(\n        res => this.loadSucces()\n      ).catch(error => this.loadFail(error)) ;\n      }\n  }\n\n  loadSucces() {\n    this.spinner.hide();\n    this.mudancasNaoSalvas = false;\n    let toast = this.toastr.success('Cadastro realizado com Sucesso!', 'Bem vindo!');\n    this.registerForm?.reset();\n    if (toast) {\n      toast.onHidden.subscribe(() => {\n        this.router.navigate(['/home']);\n      });\n    }\n  }\n\n  loadFail(error: string){\n    this.spinner.hide();\n    this.registerFail = true;\n    this.toastr.error(error, 'Ocorreu um erro!');\n  }\n\n  hasCapitalLetter(password: string) : boolean {\n     return /[A-Z]/.test(password);\n  }\n\n  hasNumber(password: string) : boolean {\n    return /[0-9]/.test(password);\n  }\n\n  hasSpecialCharacter(password: string) : boolean {\n    return /\\W|_/.test(password);\n  }\n\n  validationPassword(password: string) : boolean {\n    if (this.hasCapitalLetter(password) && this.hasNumber(password) && this.hasSpecialCharacter(password) && password.length >= 6)\n      return true;\n    else\n      return false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../generalStyles/mixins-and-variables.scss';\r\n\r\n.backgrounds {\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  & > div {\r\n    height: 100%;\r\n  }\r\n\r\n\r\n}\r\n\r\n.background-login {\r\n  background: linear-gradient(180deg, #33383D 0%, #1C1D20 100%);\r\n  color: white;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 50%;\r\n  @include responsive(mobileL) {\r\n    width: 100% !important;\r\n  }\r\n  @include responsive(mobileS) {\r\n    width: 100% !important;\r\n  }\r\n\r\n\r\n  .logo-login {\r\n    @include responsive (monitor) {\r\n      display: none;\r\n    }\r\n    @include responsive (tablet) {\r\n      display: none;\r\n    }\r\n\r\n    @include responsive (laptop) {\r\n      display: none;\r\n    }\r\n\r\n\r\n    @include responsive(mobileS)\r\n    {\r\n      max-width: 270px !important;\r\n      margin-bottom: 20px;\r\n    }\r\n\r\n    @include responsive(mobileL)\r\n    {\r\n      width: 330px;\r\n      margin-bottom: 30px;\r\n    }\r\n  }\r\n  .explanation {\r\n      strong {\r\n        font-size: 60px;\r\n        font-weight: 400;\r\n      }\r\n      max-width: 300px;\r\n      @include responsive(mobileS) {\r\n        max-width: 270px;\r\n      }\r\n      font-size: 16px;\r\n    }\r\n\r\n\r\n    margin-bottom: 100px;\r\n\r\n.form {\r\n  h1 {\r\n    font-size: 30px;\r\n    font-weight: 400;\r\n    margin-top: 100px;\r\n    margin-bottom: 35px;\r\n    @include responsive(mobileS) {\r\n      margin-top: 50px !important;\r\n    }\r\n\r\n    @include responsive(mobileL)\r\n    {\r\n      margin-top: 70px !important;\r\n    }\r\n  }\r\n\r\n.form-group + .form-group {\r\n  margin-top: 35px;\r\n}\r\n\r\n input {\r\n  color: white;\r\n  background: none;\r\n  outline: none;\r\n  box-sizing: border-box;\r\n  width: 379px;\r\n  @include responsive(tablet) {\r\n    width: 320px;\r\n  }\r\n\r\n  @include responsive(mobileL) {\r\n    width: 320px;\r\n  }\r\n\r\n  @include responsive(mobileS) {\r\n    width: 270px;\r\n  }\r\n  height: 60px;\r\n  border: 1px solid;\r\n  border-radius: 50px;\r\n  padding: 20px;\r\n  margin-right: 20px;\r\n  @include responsive(mobileS) {\r\n    margin-right: 0px;\r\n  }\r\n  &::placeholder {\r\n    color: white;\r\n    font-family: Mark-Pro;\r\n  }\r\n\r\n }\r\n .out-input {\r\n  transition: 0.5s;\r\n  position: absolute;\r\n  right: -20px;\r\n\r\n  @include responsive(mobileS) {\r\n   right: 30px;\r\n  }\r\n\r\n}\r\n .in-input {\r\n  transform: translateX(-40px);\r\n  @include responsive(mobileS) {\r\n    transform: translateX(0);\r\n    right: 30px;\r\n   }\r\n  position: absolute;\r\n  transition: 0.5s;\r\n  right: 0px;\r\n}\r\n\r\n  .text-danger {\r\n    font-weight: 700;\r\n    font-size: 16px;\r\n    line-height: 20px;\r\n    text-align: center;\r\n    color: #E9B425;\r\n\r\n    p {\r\n      margin-top: 10px;\r\n    }\r\n\r\n  }\r\n\r\n  margin-bottom: 28px;\r\n}\r\n\r\nbutton {\r\nmargin-bottom: 15px;\r\nbox-sizing: border-box;\r\ncolor: white;\r\nfont-weight: 700;\r\nfont-size: 18px;\r\nwidth: 379px;\r\n@include responsive(tablet)\r\n{\r\n  width: 320px;\r\n}\r\n\r\n@include responsive(mobileL) {\r\n  width: 320px;\r\n}\r\n\r\n@include responsive(mobileS) {\r\n  width: 270px;\r\n}\r\nheight: 67px;\r\nbackground: linear-gradient(90deg, #FF2D04 0%, #C13216 100%);\r\nbox-shadow: 5px 5px 15px rgba(0, 0, 0, 0.5);\r\nborder-radius: 50px;\r\nborder: none;\r\nmargin-top: 50px;\r\n\r\ncursor: pointer;\r\n\r\n&:disabled {\r\n  cursor: default;\r\n}\r\n\r\n}\r\n\r\n.auth-fail-button {\r\n  margin-top: 47px !important;\r\n}\r\n\r\n}\r\n\r\n.background-notebook {\r\n  background: url('../../../assets/notebook-background.jpg') no-repeat center;\r\n  display: none;\r\n  @include responsive(tablet) {\r\n    display: block;\r\n    width: 50%;\r\n  }\r\n  @include responsive(laptop) {\r\n    display: block;\r\n    width: 50%;\r\n  }\r\n  @include responsive(monitor) {\r\n    display: block;\r\n    width: 50%;\r\n  }\r\n}\r\n\r\n\r\n.logo {\r\n  margin: auto;\r\n  margin-top: 35px;\r\n}\r\n\r\n.input-auth-fail, .is-invalid {\r\n  border-color:#E9B425 !important;\r\n}\r\n\r\n.rules-password {\r\n  transition: 5s;\r\n  text-align: left !important;\r\n  display: block !important;\r\n\r\n  .ok {\r\n    color: green;\r\n  }\r\n}\r\n\r\n.is-valid {\r\n  display: none !important;\r\n  transition: .5s;\r\n}\r\n\r\na {\r\n  color: #E9B425;\r\n  transition: .3s;\r\n\r\n  strong {\r\n    text-decoration: underline;\r\n  }\r\n  &:hover {\r\n    color: black;\r\n    transition: .3s;\r\n  }\r\n}\r\n",
                    "styleUrl": "./register.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "FormBaseComponent",
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "\n<div class=\"flex backgrounds\">\n\n  <div class=\"background-login flex\">\n\n    <div>\n      <img class=\"logo-login\" src=\"../../../assets/Logo-Compasso-Branco.svg\" alt=\"\">\n      <p class=\"explanation\"><strong>Olá,</strong><br> Para continuar navegando de forma segura, faça um cadastro.</p>\n\n\n    <div class=\"form\">\n      <h1 id=\"register-title\">Cadastro</h1>\n\n        <form novalidate (ngSubmit)=\"register()\" [formGroup]=\"registerForm\" style=\"margin-bottom: 10px;\">\n          <div class=\"form-group\">\n            <div class=\"flex input-icon\" style=\"align-items: center; position: relative;\">\n            <input  [ngClass]=\"{'is-invalid': displayMessage.email }\" (input)=\"registerFail = false\"  [class.input-auth-fail]=\"registerFail\" [(ngModel)]=\"emailValue\" matInput placeholder=\"Usuário\" class=\"form-control\" id=\"email\" type=\"text\" formControlName=\"email\">\n            <img src=\"../../../assets/user-icon.svg\"  [class.out-input]=\"emailValue == ''\" [class.in-input] =\"emailValue != '' && emailValue != ' '\"  alt=\"\">\n          </div>\n            <span class=\"text-danger\" *ngIf=\"displayMessage.email\">\n            <p [innerHTML]=\"displayMessage.email\"></p>\n          </span>\n          </div>\n\n          <div class=\"form-group\">\n            <div class=\"flex input-icon\" style=\"align-items: center;  position: relative;\">\n            <input [ngClass]=\"{'is-invalid': displayMessage.password || (validationPassword(passwordValue) == false && passwordValue != '' && passwordValue != ' ')}\" (input)=\"registerFail = false\" [class.input-auth-fail]=\"registerFail\" [(ngModel)]=\"passwordValue\" placeholder=\"Senha\" class=\"form-control\" id=\"password\" type=\"password\" formControlName=\"password\">\n            <img src=\"../../../assets/password-icon.svg\" alt=\"\" [class.out-input]=\"passwordValue == '' || passwordValue == ' '\"[class.in-input] =\"passwordValue != '' && passwordValue != ' '\">\n          </div>\n          <span class=\"text-danger\" [ngClass]=\"{'is-valid': (validationPassword(passwordValue) == true) || passwordValue == '' || passwordValue == ' '}\" [class.rules-password] =\"passwordValue != '' && passwordValue != ' '\" >\n            <p [class.ok] = \"passwordValue.length >= 6\"> Mínimo 6 caracteres </p>\n            <p [class.ok] = \"hasCapitalLetter(passwordValue)\"> Um caracter maiúsculo </p>\n            <p [class.ok] = \"hasSpecialCharacter(passwordValue)\"> Um caracter especial </p>\n            <p [class.ok] = \"hasNumber(passwordValue)\"> Um número </p>\n          </span>\n            <span class=\"text-danger\" *ngIf=\"displayMessage.password\">\n            <p [innerHTML]=\"displayMessage.password\"></p>\n            </span>\n          </div>\n\n          <div class=\"form-group\">\n            <div class=\"flex input-icon\" style=\"align-items: center;  position: relative;\">\n            <input (input)=\"registerFail = false\" [class.input-auth-fail]=\"registerFail\" [(ngModel)]=\"confirmPasswordValue\" placeholder=\"Confirmação de Senha\" class=\"form-control\" id=\"confirmPassword\" type=\"password\" formControlName=\"confirmPassword\" [ngClass]=\"{'is-invalid': displayMessage.confirmPassword }\">\n            <img src=\"../../../assets/password-icon.svg\" alt=\"\"  [class.out-input]=\"confirmPasswordValue == ''\" [class.in-input] =\"confirmPasswordValue != '' && confirmPasswordValue != ' '\">\n          </div>\n            <span class=\"text-danger\" *ngIf=\"displayMessage.confirmPassword\">\n            <p [innerHTML]=\"displayMessage.confirmPassword\"></p>\n            </span>\n          </div>\n        </form>\n        <p id=\"register-fail\" *ngIf=\"registerFail == true\" class=\"text-danger\" style=\"margin-top: 28px;\">Ops, parece que algo deu errado no registro! <br>Tente novamente</p>\n    </div>\n    <div class=\"form-group\">\n      <button class=\"Mark\" id=\"btn-register\" [disabled]=\"!registerForm.valid\" type=\"submit\" (click)=\"register()\" [ngClass]=\"{'auth-fail-button': registerFail == true}\"> Continuar</button>\n    </div>\n    <a [routerLink]=\"['/account/login']\">Já possui uma conta? Faça o <strong>login</strong> </a>\n  </div>\n  </div>\n\n  <div class=\"background-notebook\">\n    <img class=\"logo\" src=\"../../../assets/Logo-Compasso-Branco.svg\" alt=\"\">\n  </div>\n\n  <p>\n    <ngx-spinner bdColor = \"rgba(0, 0, 0, 0.8)\" size = \"large\" color = \"#ffffff\" type = \"square-jelly-box\" [fullScreen] = \"true\"><p style=\"color: white\" > Loading... </p></ngx-spinner>\n  </p>\n</div>\n\n"
        }
    ],
    "modules": [
        {
            "name": "AccountModule",
            "id": "module-AccountModule-5f6a90b1efa057f624f27b710af55e2d687fcbed164fca8617ee376873f60551e80603c6220a722acdef8c880be7940bd257e59d6ef637ff8f0ee9cb9abc5f6d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/account/account.module.ts",
            "methods": [],
            "sourceCode": "import { NgxSpinnerModule } from 'ngx-spinner';\nimport { AccountService } from './services/account.service';\nimport { AccountGuard } from './services/account.guard';\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { LoginComponent } from './login/login.component';\nimport { AccountAppComponent } from './account.app.component';\n\nimport { AccountRoutingModule } from './account.route';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport { RegisterComponent } from './register/register.component';\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    AccountAppComponent,\n    RegisterComponent\n  ],\n  imports: [\n    CommonModule,\n    AccountRoutingModule,\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    MatInputModule,\n    MatButtonModule,\n    MatGridListModule,\n    NgxSpinnerModule\n  ],\n  providers: [\n    AccountService,\n    AccountGuard\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class AccountModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AccountService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountAppComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AccountRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AccountRoutingModule",
            "id": "module-AccountRoutingModule-82e47ebed8c14a3204b7e3aa45b4f5ee024abb1747a26767400e42b2054fdbbf4a925aae3ab613b9f9550d00185b7ce44fae335ada109aba6831ecc30ec62599",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/account/account.route.ts",
            "methods": [],
            "sourceCode": "import { RegisterComponent } from './register/register.component';\r\nimport { AccountGuard } from './services/account.guard';\r\nimport { AccountAppComponent } from './account.app.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from './login/login.component';\r\n\r\n\r\nconst accountRouterConfig: Routes = [\r\n    {\r\n        path: '', component: AccountAppComponent,\r\n        children: [\r\n            { path: 'register', component: RegisterComponent, canActivate: [AccountGuard], canDeactivate: [AccountGuard] },\r\n            { path: 'login', component: LoginComponent, canActivate: [AccountGuard]}\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(accountRouterConfig)\r\n    ],\r\n    exports: [RouterModule]\r\n})\r\nexport class AccountRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-de822d04624c07571ab2d2df5137660ec19bf80794a0dea4671b4c77cc5ff54f9ea412e562612af20fe9a1dcc2a6a6f79f8d79c5b3f4dac32a413650262bbb98",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { HomeGuard } from './Services/home.guard';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA  } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\n\nimport { registerLocaleData } from '@angular/common';\nimport localePt from '@angular/common/locales/pt'\n\nregisterLocaleData(localePt);\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ToastrModule } from 'ngx-toastr';\n\nimport { HomeComponent } from './home/home.component';\nimport { WeatherService } from './Services/weather.service';\nimport { AngularFireModule } from '@angular/fire/compat';\nimport { environment } from 'src/environments/environment';\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    CommonModule,\n    ToastrModule.forRoot(),\n    HttpClientModule,\n    AngularFireModule.initializeApp(environment.firebaseConfig),\n  ],\n  providers: [\n    WeatherService,\n    HomeGuard\n   ],\n   schemas: [\n    CUSTOM_ELEMENTS_SCHEMA\n  ],\n   bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "WeatherService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-e40e6c1d4ba39e5c4a8b7fbe1550653967c67a77e07612b9262dc128f478737eb3f7efb69e4f36c5b5262cf1190dd68c65c192d0a2b08fa55d7f616d79297987",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { HomeGuard } from './Services/home.guard';\nimport { HomeComponent } from './home/home.component';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/account/login', pathMatch: 'full'},\n  { path: 'account',\n    loadChildren: () => \"import('./account/account.module')\\\n      .then(m => m.AccountModule)\"\n  },\n  {\n    path: 'home', component: HomeComponent, canActivate: [HomeGuard]\n  },\n  { path: '**', redirectTo: '/account/login', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  firebaseConfig: {\n    apiKey: \"AIzaSyAYIxcEVnm5FWzidWGtCe0MvOd4_UjTxYg\",\n    authDomain: \"projetofinalcompass-174e2.firebaseapp.com\",\n    projectId: \"projetofinalcompass-174e2\",\n    storageBucket: \"projetofinalcompass-174e2.appspot.com\",\n    messagingSenderId: \"155166164115\",\n    appId: \"1:155166164115:web:e7253c6a89c679830cf966\",\n    measurementId: \"G-Y70DW1W2GV\"\n  },\n\n\n\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  firebaseConfig: {\n    apiKey: \"AIzaSyAYIxcEVnm5FWzidWGtCe0MvOd4_UjTxYg\",\n    authDomain: \"projetofinalcompass-174e2.firebaseapp.com\",\n    projectId: \"projetofinalcompass-174e2\",\n    storageBucket: \"projetofinalcompass-174e2.appspot.com\",\n    messagingSenderId: \"155166164115\",\n    appId: \"1:155166164115:web:e7253c6a89c679830cf966\",\n    measurementId: \"G-Y70DW1W2GV\"\n  },\n\n\n\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "/account/login",
                        "pathMatch": "full"
                    },
                    {
                        "path": "account",
                        "loadChildren": "./account/account.module#AccountModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "accountRouterConfig",
                                        "filename": "src/app/account/account.route.ts",
                                        "module": "AccountRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "AccountAppComponent",
                                                "children": [
                                                    {
                                                        "path": "register",
                                                        "component": "RegisterComponent",
                                                        "canActivate": [
                                                            "AccountGuard"
                                                        ],
                                                        "canDeactivate": [
                                                            "AccountGuard"
                                                        ]
                                                    },
                                                    {
                                                        "path": "login",
                                                        "component": "LoginComponent",
                                                        "canActivate": [
                                                            "AccountGuard"
                                                        ]
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "AccountModule"
                            }
                        ]
                    },
                    {
                        "path": "home",
                        "component": "HomeComponent",
                        "canActivate": [
                            "HomeGuard"
                        ]
                    },
                    {
                        "path": "**",
                        "redirectTo": "/account/login",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.base.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppBasePage",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "e2e/src/register/app.register.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppRegisterPage",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/Services/home.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "HomeGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/Services/weather.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WeatherService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/account/account.app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountAppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/account/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/account/models/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/account/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/account/services/account.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AccountGuard",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/account/services/account.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccountService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/base-components/form-base.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormBaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/generic-form-validation.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GenericValidator",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/generic-form-validation.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DisplayMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/generic-form-validation.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ValidationMessages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/localstorage.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LocalStorageUtils",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}